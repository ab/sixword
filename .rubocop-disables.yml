# This configuration was generated by
# `rubocop --auto-gen-config`
# on 2015-11-21 23:48:38 -0800 using RuboCop version 0.35.0.
# The point is for the user to remove these configuration records
# one by one as the offenses are removed from the code base.
# Note that changes in the inspected code, or installation of new
# versions of RuboCop, may require this file to be generated again.

# Configuration parameters: EnforcedStyle, SupportedStyles.
Style/StringLiterals:
  Enabled: false

# Offense count: 3
Lint/LiteralInCondition:
  Enabled: false

# Offense count: 6
Metrics/AbcSize:
  Max: 50

# Offense count: 1
Metrics/BlockNesting:
  Max: 4

# Offense count: 1
# Configuration parameters: CountComments.
Metrics/ClassLength:
  Enabled: false

# Offense count: 4
Metrics/CyclomaticComplexity:
  Max: 15

# Offense count: 12
# Configuration parameters: CountComments.
Metrics/MethodLength:
  Max: 45
  Exclude:
    - bin/sixword

# Offense count: 2
# Configuration parameters: CountComments.
Metrics/ModuleLength:
  Enabled: false

# Offense count: 3
Metrics/PerceivedComplexity:
  Max: 15

# Offense count: 256
# Cop supports --auto-correct.
Style/AlignArray:
  Exclude:
    - 'lib/sixword/words.rb'

# Offense count: 5
Style/ConstantName:
  Enabled: false

# Configuration parameters: Exclude.
#
# We could re-enable this if it understood that the top level module should
# *not* be documented in files that are not the first to define it.
#
Style/Documentation:
  Enabled: false
  Exclude:
    - 'spec/**/*'
    - 'test/**/*'

# ********************************
# Disagree with these style points
# ********************************

Style/DotPosition:
  Enabled: false
Style/DoubleNegation:
  Enabled: false
Style/EmptyLines:
  Enabled: false
Style/EmptyLinesAroundClassBody:
  Enabled: false
Style/EmptyLinesAroundMethodBody:
  Enabled: false
Style/EmptyLinesAroundModuleBody:
  Enabled: false
Style/GuardClause:
  Enabled: false

# Don't favor modifier style ever.
Style/IfUnlessModifier:
  Enabled: false
Style/WhileUntilModifier:
  Enabled: false

Style/InfiniteLoop:
  Enabled: false
Style/PercentLiteralDelimiters:
  PreferredDelimiters:
    '%w': '{}'
    '%W': '{}'
Style/RaiseArgs:
  EnforcedStyle: compact
Style/RedundantReturn:
  Enabled: false
Style/Alias:
  Enabled: false
Style/SignalException:
  EnforcedStyle: only_raise
Style/SpaceAroundEqualsInParameterDefault:
  EnforcedStyle: no_space

# Arguable
# Configuration parameters: EnforcedStyle, SupportedStyles, EnforcedStyleForEmptyBraces, SpaceBeforeBlockParameters.
Style/SpaceInsideBlockBraces:
  Enabled: false

# Arguable
# Configuration parameters: EnforcedStyle, EnforcedStyleForEmptyBraces, SupportedStyles.
Style/SpaceInsideHashLiteralBraces:
  Enabled: false

# Offense count: 27
# Cop supports --auto-correct.
# Configuration parameters: EnforcedStyleForMultiline, SupportedStyles.
Style/TrailingCommaInLiteral:
  # SupportedStyles:
  #   - comma
  #   - no_comma
  EnforcedStyleForMultiline: comma

# Don't favor %w for arrays of words.
Style/WordArray:
  Enabled: false

# Definitely do NOT assign variables within a conditional. Christ.
Style/ConditionalAssignment:
  Enabled: false

# ********************************

# Configuration parameters: AllowedVariables.
Style/GlobalVars:
  Exclude:
    - 'spec/spec_helper.rb'

# I disagree with this cop for the specific case of
#   if !foo.empty?
# because I think it's a shame that ruby has no nonempty? predicate, and it's
# clearer if the double negative is all on the RHS.
#
Style/NegatedIf:
  Exclude:
    - 'lib/sixword/cli.rb'

# Torn on this one, not really sure what improves clarity.
# TODO
# Offense count: 7
# Cop supports --auto-correct.
Style/SpaceAfterColon:
  Exclude:
    - 'lib/sixword.rb'
    - 'lib/sixword/cli.rb'

# Offense count: 2
Style/SpaceInsideBrackets:
  Exclude:
    - 'lib/sixword/words.rb'

# Offense count: 2
# Cop supports --auto-correct.
Style/SpecialGlobalVars:
  Exclude:
    - 'bin/sixword'
    - 'sixword.gemspec'
